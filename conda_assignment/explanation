###Introduction
These are the recreated files for my conda assignment.

**opev1** files are the recreated, modified and exported version of the **software_dev_v1**, while the **ope_v2** files are only recreated and exported versions of **software_dev_v2** file.

### Workflow
Forked the repo into my personal github, then opened it on github desktop to access the files.


**For Version 1**

1. Using Anaconda prompt (miniconda3), The software_dev_v1 file is imported and given a new name (ope_v1). 
` conda env create -n ope_v1 --file ...software_dev_v1.yml`

2. Launch anaconda_navigator using a launcher file previously created.

3. Navigate to the newly created ope_v1 file, then modified it.

- Modification: remove **gdal** (and its dependencies **fiona** and **geopandas**), add **autograd1.5** (and its dependency **future 0.18.3)** 

4. Back in the anaconda prompt, activate the ope_v1 environment. List packages to confirm modification 
5. Export the now modified environment in 2 ways, using the `--no-builds` option and `--from-history` option.

From-History Option: This option will generate a YAML file that is cross-platform compatible, meaning that it will list only the packages that are necessary to recreate the environment and that can be installed on any operating system supported by conda. This YAML file will not include any platform-specific or architecture-specific packages, thereby ensuring **inter-platform compatibility**. This option is useful if you want to share the environment with others who may have different operating systems or architectures. 

No-Builds Option: This option will generate a YAML file that is specific to the platform and architecture on which the environment was created. This YAML file will include all the packages and their exact versions, including platform-specific or architecture-specific packages that were installed in the environment. This option is useful if you want to recreate the environment exactly as it was on the same platform and architecture.

code snippet:
`conda env export --from-history>ope_v1_platformcompatible`
`conda env exprt --no-builds>ope_v2_platformspecific`


**For Version 2**
The same workflow was followed except the modification.


**Learning**
A few facts were noted.

- The manner in which the source file was created determines how the exported file looks. 
- V2 was created as a very simple file with just 3 packages. However, upon importing it in anaconda-navigator, all the dependencies where also imported, making it as long as version 1. However, upon exporting it again, with the from-history option, the same simple file is again achieved. 
- This is in direct contrast with v1, where, upon exporting it again, the dependencies where also included (maintaining its prior length), albeit without the system-specific components. 
- This explains why even though they will create the same environment (per version used), they look totally different.
- When environment files are exported without specific package versions, the latest versions are installed upon subsequent import.
